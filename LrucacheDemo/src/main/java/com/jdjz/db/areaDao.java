package com.jdjz.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA".
*/
public class areaDao extends AbstractDao<area, String> {

    public static final String TABLENAME = "AREA";

    /**
     * Properties of entity area.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Areaid = new Property(0, String.class, "areaid", true, "AREAID");
        public final static Property Areaname = new Property(1, String.class, "areaname", false, "AREANAME");
    }


    public areaDao(DaoConfig config) {
        super(config);
    }
    
    public areaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA\" (" + //
                "\"AREAID\" TEXT PRIMARY KEY NOT NULL ," + // 0: areaid
                "\"AREANAME\" TEXT);"); // 1: areaname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, area entity) {
        stmt.clearBindings();
 
        String areaid = entity.getAreaid();
        if (areaid != null) {
            stmt.bindString(1, areaid);
        }
 
        String areaname = entity.getAreaname();
        if (areaname != null) {
            stmt.bindString(2, areaname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, area entity) {
        stmt.clearBindings();
 
        String areaid = entity.getAreaid();
        if (areaid != null) {
            stmt.bindString(1, areaid);
        }
 
        String areaname = entity.getAreaname();
        if (areaname != null) {
            stmt.bindString(2, areaname);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public area readEntity(Cursor cursor, int offset) {
        area entity = new area( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // areaid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // areaname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, area entity, int offset) {
        entity.setAreaid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAreaname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(area entity, long rowId) {
        return entity.getAreaid();
    }
    
    @Override
    public String getKey(area entity) {
        if(entity != null) {
            return entity.getAreaid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(area entity) {
        return entity.getAreaid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
